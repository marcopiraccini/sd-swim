/**
 * Supported base message types + extensions
 *
 * Supported extension message types.
 * META: Here some / all my metadata
 * ALL_META: Please, send me all metadata
 */
enum MessageType {
  JOIN = 0;
  JOIN_ACK = 1;
  PING = 2;
  ACK = 3;
  PING_REQ = 4;
  EXT = 5;
  META = 10;      // Metadata extension
  ALL_META= 11;   // Metadata extension
}

/**
 * Node states
 */
enum NodeState {
    Alive = 0;
    Suspect = 1;
    Faulty = 2;
}

message Node {
  optional string host = 1;
  optional int32 port = 2;
}

message Member {
  required Node node = 1;
  optional Node setBy = 2;
  optional NodeState state = 3 [default = 0];
  optional int32 incNumber = 4 [default = 0]; // incarnation number
  optional bytes uuid = 5;
}

message IndirectRequest {
  required Node target = 1;
  required Node requester = 2;
}

/**
 * SD-SWIM Protocol Message
 */
message Msg {
  optional Node destination = 1;
  required MessageType type = 2;
  repeated Member members = 3;            // The full list, is sent only in join_ack
  repeated Member updates = 4;            // To piggiback the updates
  optional IndirectRequest request = 5;   // Used for indirect pings (PIG_REQ) and related ACK
  repeated Metadata metadata = 6;         // Metadata extension. Used only in META message
}

// METADATA DISTRIBUTION EXTENSION ******************************

message Entry {
  required string key = 1;
  required bytes value = 2;
}

message Metadata {
  required Node owner = 1;
  repeated Entry entries = 2;
  required int32 version = 3; // Only the owner can update the version
}
